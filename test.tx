(define setm (addr n)
    (raw_vm "push_slot 1"
            "push_slot 0"
            "set_mem"
            "push_lit 0"))

(define getm (addr)
    (raw_vm "push_slot 0"
            "push_mem"))

(define setm* (addr offset n)
    (setm (+ addr offset) n))

(define getm* (addr offset)
    (getm (+ addr offset)))

(define not (v)
    (if (= v 0)
        1
        0))

(define break ()
    (raw_vm "breakpoint"
            "push_lit 0"))

(define dalloc (n)
    (raw_vm "dict"
            "push_slot 0"
            "allocate"))

(define write-block-header (addr used? size prev next)
    (begin
        (setm* addr 0 used?) ; used? flag
        (setm* addr 1 size)
        (setm* addr 2 prev)
        (setm* addr 3 next)))

(define block-used? (addr)
    (!= (getm addr) 0))

(define block-free? (addr)
    (= (getm addr) 0))

(define block-used! (addr val)
    (setm addr val))

(define block-size (addr)
    (getm* addr 1))

(define block-size! (addr val)
    (setm* addr 1 val))

(define block-prev (addr)
    (getm* addr 2))

(define block-prev! (addr val)
    (setm* addr 2 val))

(define block-next (addr)
    (getm* addr 3))

(define block-next! (addr val)
    (setm* addr 3 val))

(define block-content (addr)
    (+ addr 4))

(define chew-block (addr req-size)
    (let ((content-addr (block-content addr))
          (old-size        (block-size addr))
          (old-prev        (block-prev addr))
          (old-next        (block-next addr)))
        (if (or (> req-size old-size) (block-used? addr))
                -1
                (begin
                    (write-block-header addr ; create requested block
                                        1
                                        req-size
                                        old-prev
                                        (+ addr (+ 4 req-size)))
                    (write-block-header (+ addr (+ 4 req-size)) ; truncate the free block
                                        0
                                        (- old-size req-size)
                                        addr
                                        old-next)
                    (if (!= old-next 0) (block-prev! old-next (+ addr (+ 4 req-size))) 0)
                    addr))))

(define absorb-next-block (addr)
    (let ((next-addr (block-next addr)))
        (if (or (block-used? next-addr) (= next-addr 0))
            0
            (begin
                (block-size! addr (+ (block-size addr) (+ (block-size next-addr) 4)))
                (block-prev! (block-next next-addr) addr)
                (block-next! addr (block-next next-addr))
                addr))))

(define absorb-into-prev-block (addr)
    (let ((prev-addr (block-prev addr)))
        (if (or (block-used? prev-addr) (= prev-addr 0))
            0
            (absorb-next-block prev-addr))))

(define join-block (addr)
    (begin
        (absorb-next-block addr)
        (absorb-into-prev-block addr)))

(defg heap-ptr 0)

(define check-block (size block-ptr)
    (if (or (block-used? block-ptr)
            (> size (block-size block-ptr)))
        -1
        (chew-block block-ptr size)))

(define malloc (size)
    (let ((current-block heap-ptr)
          (found-block -1))
        (begin
        (while (and (!= current-block 0) (= found-block -1))
                (begin
                    (setv found-block (check-block size current-block))
                    (setv current-block (block-next current-block))))
        (+ found-block 4))))

(define free (ptr)
    (let ((real-ptr (- ptr 4)))
        (if (not (block-used? real-ptr))
            0
            (begin
                (block-used! real-ptr 0)
                (join-block real-ptr)
                1))))

(define init-heap (size)
    (begin
        (setv heap-ptr (dalloc size))
        (write-block-header heap-ptr
                            0
                            size
                            0
                            0)
        heap-ptr))

(define make-array (size)
    (malloc size))

(define array-get (array index)
   (getm* array index))

(define array-set (array index value)
    (setm* array index value))

(define copy-array (array size)
    (let ((copied-array (make-array size))
          (i 0))
        (begin
            (while (< i size)
                (begin
                    (array-set copied-array i (array-get array i))
                    (setv i (+ i 1))))
            copied-array)))

(define slice-array (array start end)
    (copy-array (+ array start)
                (+ (- end start) 1)))

(define clear-array (array size)
    (let ((i 0))
        (begin
            (while (< i size)
                (begin
                    (array-set array i 0)
                    (setv i (+ i 1))))
            array)))

(define array-map (array size f)
    (let ((i 0))
        (begin
            (while (< i size)
                (begin
                    (array-set array i (call f (array-get array i)))
                    (setv i (+ i 1))))
            array)))

(define array-map-with-index (array size f)
    (let ((i 0))
        (begin
            (while (< i size)
                (begin
                    (array-set array i (call f (array-get array i) i))
                    (setv i (+ i 1))))
            array)))

(define array-reduce (array size init f)
    (let ((i 0)
          (a init))
        (begin
            (while (< i size)
                (begin
                    (setv a (call f a (array-get array i)))
                    (setv i (+ i 1))))
            a)))

(define string-length (str)
    (let ((i 0))
        (begin
            (while (!= (getm* str i) 0)
                (setv i (+ i 1)))
            i)))

(init-heap 1000)
